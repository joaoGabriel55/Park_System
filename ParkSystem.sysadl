Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
	enum Comando {
		ABRIR, FECHAR
	}
	enum Tipo {
		VERDE, AZUL, AMARELO
	}
dimension Identificacao
	unit Codigo {
		dimension = Identificacao } datatype Vaga {
		attributes:
			tipo : Tipo;
			status : Boolean;
		}
	}
Requirement GerenciadorVagasFR ( 1 ) {
	text =
	"O sistema deve monitorar cada uma das vagas do estacionamento e sinalizar o status da vaga por meio de lâmpadas, diferenciando as vagas destinadas a idosos e deficientes físicos das demais"
	Requirement TipoVagaFR ( 1.1 ) {
		text =
		"O status da vaga deve ser representado pela cor da lâmpada associada a ela, a cor vermelha indica que a vaga está ocupada, a cor verde indica que a vaga está disponível, a cor amarela indica que a vaga está disponível e que é destinada a idosos, a cor azul indica que a vaga está disponível e que é destinada à deficientes físicos."
		derive DetectarStatusVagaFR;
	}
	Requirement ContadorVagasDiponiveisFR ( 1.3 ) {
		text =
		"O sistema deve indicar em painéis a quantidade de vagas disponíveis em cada ala do estacionamento."
	}
}
Requirement DetectarStatusVagaFR ( 1.2 ) {
	text =
	"O sistema deve detectar para cada vaga do estacionamento se existe ou não um veículo estacionado"
}
Requirement GerenciadorEntradaVeiculosFR ( 2 ) {
	text =
	"O sistema deve controlar a entrada de veículos por meio de uma cancela eletrônica. Um ticket com código de barras deve ser impresso para cada motorista antes do mesmo entrar no estacionament"
	Requirement ImprimirTicketFR ( 2.1 ) {
		text =
		"Antes de o motorista entrar no estacionamento um ticket com código de barras deve ser impresso e recolhido pelo motorista. Associado ao código de barras impresso no ticket o sistema deve armazenar a hora em que o ticket foi gerado."
	}
}
Requirement GerenciadorSaidaVeiculosFR ( 3 ) {
	text =
	"O sistema deve gerenciar a saída de veículos por meio de uma cancela eletrônica. Os veículos poderão deixar o estacionamento apenas após o pagamento da taxa de estacionamento."
	Requirement LerTicketFR ( 3.1 ) {
		text =
		"A partir da leitura do código de barras impresso no ticket o sistema deve recuperar todas as informações associadas ao ticket (horário de entrada no estacionamento, valor da taxa de estacionamento,  se a taxa foi ou não paga, se foi paga o horário de pagamento )."
	}
}
Requirement DetectorVeiculoFR ( 4 ) {
	text =
	"Ao se se aproximar com o veículo da cancela eletrônica a presença do veículo deve ser detectada de forma automática."
}
Requirement AbrirCancelaEletronicaFR ( 5 ) {
	text =
	"A cancela eletrônica deve abrir automaticamente após o motorista recolher o ticket impresso na entrada e no momento em que o motorista apresentar o ticket devidamente paga na saída do estacionamento"
}
Requirement GerenciadorPagamentoFR ( 6 ) {
	text =
	"O sistema deve permitir ao usuário realizar o pagamento da taxa de estacionamento. O pagamento deve ser calculado com base no tempo em que o veículo esteve no estacionamento."
	Requirement RealizarPagamentoFR ( 6.1 ) {
		text =
		"O sistema deve permitir ao usuário realizar o pagamento em caixas automáticos com cartão ou dinheiro."
	}
}
Requirement AbrirCancelaEmergencialFR ( 7 ) {
	text =
	"Em casos de emergência o operador do estacionamento poderá abrir a cancela de emergência."
}
package ParkingSystemConnectors {
	import ParkingSystemPorts;
import SysADL.types;
	}
package ParkingSystemComponents {
	import ParkingSystemPorts;
	import ParkingSystemConnectors;
	import SysADL.types;
	component def GerenciadorVagas {
			ports:
			outVagas : VagasOPT;
		configuration {
		}
	}
		boundary component def TipoVagaLedCP {
	}
		boundary component def DetectorPresencaVagaCP {
	}
		boundary component def DisplayVagasDisponiveisCP {
	}
	component def GerenciadorEntradaSaidaVeiculo {
			ports:
			inCodTicket : CodigoTicketIPT;
		configuration {
		}
	}
		boundary component def ImpressaoTicket {
	ports:
			inGerarTicket : GerarTicketIPT;
			outCodTicket : CodigoTicketOPT;
		}
	component def LeituraTicket {
	}
component def BotaoDeEmergencia {
		}
		component def DetectorEntradaVeiculoCP {
		ports:
			^out : CommandOPT;
		}
		component def ControleSaidaCancelaCP {
		}
		boundary component def GerenciadorPagamentoCP {
		ports:
			newPort : CodigoTicketIPT;
		}
		component def GerenciadorEstacionamentoARCH {
			configuration {
			}
		}
		component def ControladorQtdVagas {
		}
	component def GerenciadorLocalVaga {
			configuration {
			}
		}
		component def ControladorVagaLocalCP {
		}
	component def DetectorSaidaVeiculoCP {
		}
		component def ControleEntradaCancelaCP {
			ports:
			^in : CommandIPT;
			inVagas : VagasIPT;
			outGerarTicket : GerarTicketOPT;
		}
		boundary component def CancelaEntrada {
		}
		boundary component def CancelaSaida {
		}
	}
package ParkingSystemPorts {
	import SysADL.types;
port def CommandIPT {
			flow in Comando
		}
		port def CommandOPT {
			flow out Comando
		}
		port def VagasIPT {
			flow in Int
		}
		port def VagasOPT {
			flow out Int
		}
		port def CodigoTicketOPT {
			flow out String
		}
		port def GerarTicketIPT {
			flow in Boolean
		}
		port def GerarTicketOPT {
			flow out Boolean
		}
		port def CodigoTicketIPT {
			flow in String
		}
	}